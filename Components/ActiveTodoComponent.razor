<div class="alert-stacker">
    @foreach (var alert in completeAlerts)
    {
        <div class="alert alert-success alert-dismissible d-flex align-items-center fade show" role="alert">
            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:">
                <use xlink:href="#check-circle-fill" />
            </svg>
            <div>
                @alert
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="() => completeAlerts.Remove(alert)"></button>
        </div>
    }
</div>

<div class="container input-group mb-3">
    <input type="text" class="form-control" @bind="newTodo" placeholder="Enter a new todo" @onkeyup="HandleEnter">
    <div class="input-group-append">
        <button class="btn btn-success button-text-style" @onclick="() => NewTodo()"
            disabled="@string.IsNullOrWhiteSpace(newTodo)">
            Add todo
        </button>
    </div>
</div>

<div class="container todo-container">
    <h3 class="h3-style sub-title-text-style">Uncompleted todo list</h3>
    <ul class="list-group">
        @foreach (var todo in Parent.ActiveTodos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center list-text-style">
                <span>@todo.Title</span>
                <div class="d-flex gap-2">
                    <button class="btn btn-success btn-sm button-text-style" @onclick="() => CompleteTodo(todo)">
                        Complete
                    </button>
                    <button class="btn btn-danger btn-sm button-text-style" @onclick="() => DeleteTodoItem(todo)">
                        Delete
                    </button>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    [CascadingParameter]
    public required Todo Parent { get; set; }

    [Parameter]
    public EventCallback<Todo.TodoItem> OnComplete { get; set; }

    private string newTodo = string.Empty;
    private List<string> completeAlerts = new List<string>();
    private void CompleteTodo(Todo.TodoItem todo)
    {
        Parent.CompleteTodoItem(todo);
        completeAlerts.Add($"{todo.Title} is completed!");
    }

    private void DeleteTodoItem(Todo.TodoItem todo)
    {
        Parent.DeleteTodoItem(todo);
    }

    private void HandleEnter()
    {
        NewTodo();
    }

    private void NewTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo)) Parent.AddTodoItem(newTodo);
        newTodo = string.Empty;
    }
}