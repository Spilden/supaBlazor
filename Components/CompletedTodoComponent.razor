<div class="alert-stacker">
    @foreach (var alert in undoAlerts)
    {
        <div class="alert alert-warning alert-dismissible d-flex align-items-center fade show" role="alert">
            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:">
                <use xlink:href="#exclamation-triangle-fill" />
            </svg>
            <div>
                @alert
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="() => undoAlerts.Remove(alert)"></button>
        </div>
    }
</div>

<div class="container">
    <h3 class="h3-style sub-title-text-style">Completed todo list</h3>
    <ul class="list-group">
        @foreach (var todo in Parent.CompletedTodos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center list-text-style">
                <span class="list-text">@todo.Title</span>
                <div class="d-flex gap-2">
                    <button class="btn btn-warning btn-sm button-text-style" @onclick="() => HandleUndo(todo)">
                        Undo
                    </button>
                </div>
            </li>
        }
    </ul>
    <button style="margin-top: 20px;" class="btn btn-danger button-text-style"
        @onclick="() => Parent.ClearCompletedTodos()">Clear
        Completed Todo's</button>
</div>

@code {
    [CascadingParameter]
    public required Todo Parent { get; set; }

    [Parameter]
    public EventCallback<Todo.TodoItem> OnUndoComplete { get; set; }

    private List<string> undoAlerts = new List<string>();

    private void HandleUndo(Todo.TodoItem todo)
    {
        if (OnUndoComplete.HasDelegate)
        {
            Parent.UndoCompleteTodoItem(todo);
            undoAlerts.Add($"{todo.Title} is no longer completed!");
            if (undoAlerts.Count > 4)
            {
                undoAlerts.RemoveAt(0);
            }
        }
    }
}