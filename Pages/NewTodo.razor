@page "/newTodo"


<div style="margin: 10px;">
    <button class="btn btn-primary" @onclick="() => ShowTodoComponent(Todos, OnComplete)">
        Uncompleted Todo's
    </button>
    <button class="btn btn-primary" @onclick="() => ShowCompletedComponent(Completed, onUndoComplete)">
        Completed Todo's
    </button>
</div>

<CascadingValue Value="this">
    <DynamicComponent Type="currentComponent" Parameters="componentParameters" />
</CascadingValue>

@code {
    private List<TodoItem> Todos = new();
    private List<TodoItem> Completed = new();

    private Type currentComponent = typeof(TodoComponent);
    private Dictionary<string, object> componentParameters = new();

    private void ShowTodoComponent(List<TodoItem> todos, EventCallback<TodoItem> onComplete)
    {
        currentComponent = typeof(TodoComponent);
        componentParameters = new Dictionary<string, object>{
{"Todos", todos},
{"OnComplete", onComplete}
};
    }

    private void ShowCompletedComponent(List<TodoItem> completed, EventCallback<TodoItem> onUndoComplete)
    {
        currentComponent = typeof(CompletedComponent);
        componentParameters = new Dictionary<string, object>{
{"CompletedTodos", completed},
{"OnUndoComplete", onUndoComplete}
};
    }

    public void MarkComplete(TodoItem todo)
    {
        Todos.Remove(todo);
        todo.IsCompleted = true;
        Completed.Add(todo);
    }

    public void UndoComplete(TodoItem todo)
    {
        Completed.Remove(todo);
        todo.IsCompleted = false;
        Todos.Add(todo);
    }

    public class TodoItem
    {
        public string Title { get; set; } = string.Empty;
        public bool IsCompleted { get; set; }
    }

    private EventCallback<TodoItem> OnComplete => EventCallback.Factory.Create<TodoItem>(this, MarkComplete);
    private EventCallback<TodoItem> onUndoComplete => EventCallback.Factory.Create<TodoItem>(this, UndoComplete);
}