@page "/"
@inject AuthService AuthService
@inject NavigationManager NavMng

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path
            d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
    </symbol>
    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path
            d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>

<CascadingValue Value="this">
    <div class="container main-button-container">
        <div class="row">
            <div class="col-sm">
                <button class="btn btn-primary w-100 button-text-style" @onclick="ShowTodoComponent">
                    Active Todo's
                </button>
            </div>
            <div class="col-sm">
                <button class="btn btn-primary w-100 button-text-style
                        " @onclick="ShowCompletedComponent" disabled="@(CompletedTodos.Count == 0)">
                    Completed Todo's
                </button>
            </div>
        </div>
    </div>

    <div class="modal fade @(showDeleteModal ? "show d-block" : "")" tabindex="-1" role="dialog"
        style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title sub-title-text-style">Confirm Delete</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ToggleDeleteModal"></button>
                </div>
                <div class="modal-body list-text-style">
                    <p>Are you sure you want to delete: '@todoToDelete?.Title'?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary button-text-style"
                        @onclick="ToggleDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger button-text-style"
                        @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade @(showClearModal ? "show d-block" : "")" tabindex="-1" role="dialog"
        style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title sub-title-text-style">Confirm Clear</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ToggleClearModal"></button>
                </div>
                <div class="modal-body list-text-style">
                    <p>Are you sure you want to delete all completed todos?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary button-text-style"
                        @onclick="ToggleClearModal">Cancel</button>
                    <button type="button" class="btn btn-danger button-text-style"
                        @onclick="ConfirmClear">Delete</button>
                </div>
            </div>
        </div>
    </div>


    <DynamicComponent Type="currentComponent" Parameters="componentParameters" />
</CascadingValue>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticated())
        {
            NavMng.NavigateTo("/login");
        }
        ShowTodoComponent();
    }
    public List<TodoItem> ActiveTodos = new();
    public List<TodoItem> CompletedTodos = new();

    private Type currentComponent = typeof(ActiveTodoComponent);
    private Dictionary<string, object> componentParameters = new();
    private bool showDeleteModal = false;
    private bool showClearModal = false;
    private TodoItem? todoToDelete;

    private void ShowTodoComponent()
    {
        currentComponent = typeof(ActiveTodoComponent);
        componentParameters = new Dictionary<string, object>
{
{"OnComplete", EventCallback.Factory.Create<TodoItem>(this, CompleteTodoItem)}
};
    }

    private void ShowCompletedComponent()
    {
        currentComponent = typeof(CompletedTodoComponent);
        componentParameters = new Dictionary<string, object>
{
{"OnUndoComplete", EventCallback.Factory.Create<TodoItem>(this, UndoCompleteTodoItem)}
};
    }

    public void AddTodoItem(String todoName)
    {
        ActiveTodos.Add(new TodoItem { Title = todoName });
    }

    public void CompleteTodoItem(TodoItem todo)
    {
        ActiveTodos.Remove(todo);
        todo.IsCompleted = true;
        CompletedTodos.Add(todo);
        StateHasChanged();
    }

    public void UndoCompleteTodoItem(TodoItem todo)
    {
        CompletedTodos.Remove(todo);
        todo.IsCompleted = false;
        ActiveTodos.Add(todo);
        StateHasChanged();
    }
    private void ToggleDeleteModal()
    {
        showDeleteModal = !showDeleteModal;
    }
    private void ConfirmDelete()
    {
        if (todoToDelete != null)
        {
            ActiveTodos.Remove(todoToDelete);
            todoToDelete = null;
        }
        ToggleDeleteModal();
        StateHasChanged();
    }
    public void DeleteTodoItem(TodoItem todo)
    {
        todoToDelete = todo;
        ToggleDeleteModal();
        StateHasChanged();
        Console.WriteLine(showDeleteModal);
    }
    private void ToggleClearModal()
    {
        showClearModal = !showClearModal;
    }
    private void ConfirmClear()
    {
        CompletedTodos.Clear();
        ToggleClearModal();
        StateHasChanged();
    }
    public void ClearCompletedTodos()
    {
        ToggleClearModal();
        StateHasChanged();
    }

    public class TodoItem
    {
        public required string Title { get; set; }
        public bool IsCompleted { get; set; }
    }
}