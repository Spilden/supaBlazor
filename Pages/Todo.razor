@page "/Todo"

<CascadingValue Value="this">
    <div style="margin: 10px;">
        <button class="btn btn-primary" @onclick="ShowTodoComponent">
            Active Todo's
        </button>
        <button class="btn btn-primary" @onclick="ShowCompletedComponent">
            Completed Todo's
        </button>
    </div>


    <DynamicComponent Type="currentComponent" Parameters="componentParameters" />
</CascadingValue>

@code {
    public List<TodoItem> ActiveTodos = new();
    public List<TodoItem> CompletedTodos = new();

    private Type currentComponent = typeof(ActiveTodoComponent);
    private Dictionary<string, object> componentParameters = new();

    private void ShowTodoComponent()
    {
        currentComponent = typeof(ActiveTodoComponent);
        componentParameters = new Dictionary<string, object>
{
{"OnComplete", EventCallback.Factory.Create<TodoItem>(this, CompleteTodoItem)}
};
    }

    private void ShowCompletedComponent()
    {
        currentComponent = typeof(CompletedTodoComponent);
        componentParameters = new Dictionary<string, object>
{
{"OnUndoComplete", EventCallback.Factory.Create<TodoItem>(this, UndoCompleteTodoItem)}
};
    }

    public void AddTodoItem(String todoName)
    {
        ActiveTodos.Add(new TodoItem { Title = todoName });
    }

    public void CompleteTodoItem(TodoItem todo)
    {
        ActiveTodos.Remove(todo);
        todo.IsCompleted = true;
        CompletedTodos.Add(todo);
    }

    public void UndoCompleteTodoItem(TodoItem todo)
    {
        CompletedTodos.Remove(todo);
        todo.IsCompleted = false;
        ActiveTodos.Add(todo);
    }

    public void DeleteTodoItem(TodoItem todo)
    {
        ActiveTodos.Remove(todo);
    }

    public void ClearCompletedTodos()
    {
        CompletedTodos.Clear();
    }

    public class TodoItem
    {
        public required string Title { get; set; }
        public bool IsCompleted { get; set; }
    }
}