@page "/login"
@using System.ComponentModel.DataAnnotations;
@inject AuthService AuthService
@inject NavigationManager NavMng

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="userLogin" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid login-container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-6 col-md-5">
                <div class="form-container">
                    <h4 class="text-center mb-4 sub-title-text-style">Login</h4>
                    <div class="form-group mb-3">
                        <InputText id="username" class="form-control list-text-style" placeholder="Username"
                            @bind-Value="userLogin.Username" />
                    </div>
                    <div class="form-group mb-3">
                        <InputText id="password" type="password" class="form-control list-text-style"
                            placeholder="Password" @bind-Value="userLogin.Password" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100 button-text-style">Login</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticated())
        {
            NavMng.NavigateTo("/");
        }
    }
    private UserLogin userLogin = new UserLogin();
    private string errorMessage;

    private async Task HandleLogin()
    {
        var success = await AuthService.Login(userLogin.Username, userLogin.Password);
        if (success)
        {
            NavMng.NavigateTo("/");
        }
        else
        {
            errorMessage = "Unknown username or password, please try again";
        }
    }
    private class UserLogin
    {
        [Required(ErrorMessage = "Username required!")]
        [StringLength(10, ErrorMessage = "Username must be less than 10 characters")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password required!")]
        public string Password { get; set; }
    }
}